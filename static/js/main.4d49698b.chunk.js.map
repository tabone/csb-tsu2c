{"version":3,"sources":["hooks/useNoise2D.js","libs/cloud-types.js","hooks/useBoxGradient.js","hooks/useFractalNoise.js","WorldClouds.js","hooks/useCloudsNoise.js","WorldTerrain.js","libs/terrain-types.js","World.js","hooks/useTerrainNoise.js","App.js","index.js"],"names":["useNoise2D","props","seed","React","useMemo","makeNoise2D","useBoxGradient","blur","size","window","newGradient","useFractalNoise","useState","cache","setCache","octaves","persistence","noise","frequency","getNoise","newFractalNoise","useCallback","x","y","id","Object","assign","WorldClouds","cloudsSeed","variantSeed","canvasElementRef","useRef","getInfo","cloudsNoise","variantNoise","offset","setOffset","getBorderGradientValue","useEffect","animationID","requestAnimationFrame","cancelAnimationFrame","getCloudsNoise","getVariantNoise","cloudNoise","info","type","color","cloudType","useCloudsNoise","context","current","getContext","fillStyle","fillRect","clearRect","className","width","height","ref","WorldTerrain","memo","World","random","chance","Math","clouds","integer","min","max","terrainSeed","cloudsVariantSeed","terrainVariantSeed","getTerrainInfo","terrainNoise","getTerrainNoise","terrainType","useTerrainNoise","style","App","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4d49698b.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { makeNoise2D } from \"open-simplex-noise\"\r\n\r\nexport default function useNoise2D(props) {\r\n  const { seed } = props\r\n\r\n  return React.useMemo(() => {\r\n    return makeNoise2D(seed)\r\n  }, [seed])\r\n}\r\n","export default {\r\n  RAINY: \"RAINY\",\r\n  NORMAL: \"NORMAL\"\r\n}\r\n","import React from 'react'\r\n\r\nexport default function useBoxGradient(props) {\r\n  const { blur, size } = props\r\n\r\n  return React.useMemo(() => {\r\n    return window.newGradient({ blur, size })\r\n  }, [blur, size])\r\n}\r\n","import React from 'react'\r\n\r\nexport default function useFractalNoise(props) {\r\n  const [cache, setCache] = React.useState({})\r\n  const { octaves, persistence, noise, frequency } = props\r\n\r\n  const getNoise = React.useMemo(() => {\r\n    return window.newFractalNoise({\r\n      noise,\r\n      octaves,\r\n      frequency,\r\n      persistence\r\n    })\r\n  }, [octaves, frequency, persistence, noise])\r\n\r\n  return React.useCallback(\r\n    (x, y) => {\r\n      const id = `${x}:${y}`\r\n\r\n      if (cache[id] == null) {\r\n        setCache(Object.assign(cache, { [id]: getNoise(x, y) }))\r\n      }\r\n\r\n      return cache[id]\r\n    },\r\n    [cache, getNoise]\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport useNoise2D from \"./hooks/useNoise2D\"\r\nimport useCloudsNoise from \"./hooks/useCloudsNoise\"\r\n\r\nexport default function WorldClouds(props) {\r\n  const { size, cloudsSeed, variantSeed } = props\r\n\r\n  const canvasElementRef = React.useRef(null)\r\n\r\n  const getInfo = useCloudsNoise({\r\n    size,\r\n    blur: 50,\r\n    octaves: 20,\r\n    frequency: 0.01,\r\n    persistence: 0.6,\r\n    cloudsNoise: useNoise2D({ seed: cloudsSeed }),\r\n    variantNoise: useNoise2D({ seed: variantSeed })\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    const context = canvasElementRef.current.getContext(\"2d\")\r\n\r\n    for (let y = 0; y < size; y++) {\r\n      for (let x = 0; x < size; x++) {\r\n        const info = getInfo(x, y)\r\n        if (info.color == null) continue\r\n\r\n        context.fillStyle = \"#000000\"\r\n        context.fillRect(x + 10, y + 10, 1, 1)\r\n\r\n        context.fillStyle = info.color\r\n        context.fillRect(x, y, 1, 1)\r\n      }\r\n    }\r\n\r\n    return () => context.clearRect(0, 0, size, size)\r\n  }, [size, getInfo])\r\n\r\n  return (\r\n    <div className=\"AppWorldLayer AppWorldClouds\">\r\n      <canvas width={size} height={size} ref={canvasElementRef} />\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport cloudType from \"../libs/cloud-types\"\r\nimport useBoxGradient from \"./useBoxGradient\"\r\nimport useFractalNoise from \"./useFractalNoise\"\r\n\r\nexport default function useCloudsNoise(props) {\r\n  const {\r\n    size,\r\n    blur,\r\n    octaves,\r\n    frequency,\r\n    cloudsNoise,\r\n    persistence,\r\n    variantNoise\r\n  } = props\r\n\r\n  const [offset, setOffset] = React.useState(0)\r\n  const getBorderGradientValue = useBoxGradient({ size, blur })\r\n\r\n  React.useEffect(() => {\r\n    const animationID = window.requestAnimationFrame(() => {\r\n      setOffset(offset + 1)\r\n    })\r\n\r\n    return () => window.cancelAnimationFrame(animationID)\r\n  }, [offset])\r\n\r\n  const getCloudsNoise = useFractalNoise({\r\n    octaves,\r\n    frequency,\r\n    persistence,\r\n    noise: cloudsNoise\r\n  })\r\n\r\n  const getVariantNoise = useFractalNoise({\r\n    octaves,\r\n    frequency,\r\n    persistence,\r\n    noise: variantNoise\r\n  })\r\n\r\n  return React.useCallback(\r\n    (x, y) => {\r\n      const cloudNoise =\r\n        (getCloudsNoise(offset + x / 1.6, y / 1.6) + 1) / 2 +\r\n        (getBorderGradientValue(x, y) - 1)\r\n\r\n      const variantNoise = getVariantNoise(x, y)\r\n\r\n      const info = {\r\n        type: null,\r\n        cloudNoise,\r\n        color: null,\r\n        variantNoise\r\n      }\r\n\r\n      if (cloudNoise >= 0.7 && cloudNoise < 0.8) {\r\n        info.color = \"#fff\"\r\n        info.type = cloudType.NORMAL\r\n      } else if (cloudNoise >= 0.8 && cloudNoise < 1) {\r\n        info.color = \"#ccc\"\r\n        info.type = cloudType.RAINY\r\n      }\r\n\r\n      return info\r\n    },\r\n    [offset, getCloudsNoise, getVariantNoise, getBorderGradientValue]\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction WorldTerrain(props) {\r\n  const { size, getInfo } = props\r\n\r\n  const canvasElementRef = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    const context = canvasElementRef.current.getContext('2d')\r\n\r\n    for (let y = 0; y < size; y++) {\r\n      for (let x = 0; x < size; x++) {\r\n        context.fillStyle = getInfo(x, y).color\r\n        context.fillRect(x, y, 1, 1)\r\n      }\r\n    }\r\n\r\n    return () => context.clearRect(0, 0, size, size)\r\n  }, [size, getInfo])\r\n\r\n  return (\r\n    <div className=\"AppWorldLayer AppWorldTerrain\">\r\n      <canvas width={size} height={size} ref={canvasElementRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(WorldTerrain)\r\n","export default {\r\n  OCEAN: 'OCEAN',\r\n  SEA: 'SEA',\r\n  DRY_SAND: 'DRY_SAND',\r\n  SAND: 'SAND',\r\n  WET_SAND: 'WET_SAND',\r\n  DRY_GRASS: 'DRY_GRASS',\r\n  GRASS: 'GRASS',\r\n  WET_GRASS: 'WET_GRASS',\r\n  MOUNTAIN_SNOW: 'MOUNTAIN_SNOW',\r\n  MOUNTAIN_ORE: 'MOUNTAIN_ORE',\r\n  MOUNTAIN: 'MOUNTAIN'\r\n}\r\n","import React from 'react'\r\nimport chance from 'chance'\r\nimport WorldClouds from './WorldClouds'\r\nimport WorldTerrain from './WorldTerrain'\r\nimport useNoise2D from './hooks/useNoise2D'\r\nimport useTerrainNoise from './hooks/useTerrainNoise'\r\n\r\nfunction World(props) {\r\n  const random = chance(`${Math.random()}`)\r\n\r\n  const {\r\n    size,\r\n    clouds = true,\r\n    cloudsSeed = random.integer({ min: 1000, max: 9999 }),\r\n    terrainSeed = random.integer({ min: 1000, max: 9999 }),\r\n    cloudsVariantSeed = random.integer({ min: 1000, max: 9999 }),\r\n    terrainVariantSeed = random.integer({ min: 1000, max: 9999 })\r\n  } = props\r\n\r\n  const getTerrainInfo = useTerrainNoise({\r\n    size,\r\n    blur: 100,\r\n    octaves: 20,\r\n    frequency: 0.00625,\r\n    persistence: 0.6,\r\n    terrainNoise: useNoise2D({ seed: terrainSeed }),\r\n    variantNoise: useNoise2D({ seed: terrainVariantSeed })\r\n  })\r\n\r\n  return (\r\n    <div className=\"AppWorld\" style={{ width: size, height: size }}>\r\n      <WorldTerrain size={size} getInfo={getTerrainInfo} />\r\n\r\n      {clouds === true && (\r\n        <WorldClouds\r\n          size={size}\r\n          cloudsSeed={cloudsSeed}\r\n          variantSeed={cloudsVariantSeed}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(World)\r\n","import React from 'react'\r\nimport useBoxGradient from './useBoxGradient'\r\nimport terrainType from '../libs/terrain-types'\r\nimport useFractalNoise from './useFractalNoise'\r\n\r\nexport default function useTerrainNoise(props) {\r\n  const {\r\n    size,\r\n    blur,\r\n    octaves,\r\n    frequency,\r\n    persistence,\r\n    terrainNoise,\r\n    variantNoise\r\n  } = props\r\n\r\n  const getBorderGradientValue = useBoxGradient({ size, blur })\r\n\r\n  const getTerrainNoise = useFractalNoise({\r\n    octaves,\r\n    frequency,\r\n    persistence,\r\n    noise: terrainNoise\r\n  })\r\n\r\n  const getVariantNoise = useFractalNoise({\r\n    octaves,\r\n    frequency,\r\n    persistence,\r\n    noise: variantNoise\r\n  })\r\n\r\n  const getInfo = React.useCallback(\r\n    (x, y) => {\r\n      const terrainNoise =\r\n        (getTerrainNoise(x, y) + 1) / 2 + (getBorderGradientValue(x, y) - 1)\r\n\r\n      const info = {\r\n        x,\r\n        y,\r\n        type: null,\r\n        color: null,\r\n        variantNoise: null,\r\n        terrainNoise: terrainNoise\r\n      }\r\n\r\n      if (terrainNoise < 0.2) {\r\n        //water\r\n        info.color = '#003eb2'\r\n        info.type = terrainType.OCEAN\r\n      } else if (terrainNoise < 0.4) {\r\n        //water\r\n        info.color = '#0952c6'\r\n        info.type = terrainType.SEA\r\n      } else if (terrainNoise < 0.45) {\r\n        //sand\r\n        const variantNoise = getVariantNoise(x, y)\r\n        info.variantNoise = variantNoise\r\n\r\n        if (variantNoise < -0.2) {\r\n          info.color = '#867645'\r\n          info.type = terrainType.WET_SAND\r\n        } else if (variantNoise < 0.2) {\r\n          info.color = '#a49463'\r\n          info.type = terrainType.SAND\r\n        } else {\r\n          info.color = '#c2b281'\r\n          info.type = terrainType.DRY_SAND\r\n        }\r\n      } else if (terrainNoise < 0.6) {\r\n        //grass\r\n        const variantNoise = getVariantNoise(x, y)\r\n        info.variantNoise = variantNoise\r\n\r\n        if (variantNoise < -0.2) {\r\n          info.color = '#284d00'\r\n          info.type = terrainType.DRY_GRASS\r\n        } else if (variantNoise < 0.2) {\r\n          info.color = '#3c6114'\r\n          info.type = terrainType.GRASS\r\n        } else {\r\n          info.color = '#5a7f32'\r\n          info.type = terrainType.WET_GRASS\r\n        }\r\n      } else {\r\n        //mountain\r\n        const variantNoise = getVariantNoise(x, y)\r\n        info.variantNoise = variantNoise\r\n\r\n        if (variantNoise < -0.2) {\r\n          info.color = '#ebebeb'\r\n          info.type = terrainType.MOUNTAIN_SNOW\r\n        } else if (variantNoise < 0.2) {\r\n          info.color = '#8c8e7b'\r\n          info.type = terrainType.MOUNTAIN_ORE\r\n        } else {\r\n          info.color = '#a0a28f'\r\n          info.type = terrainType.MOUNTAIN\r\n        }\r\n      }\r\n\r\n      return info\r\n    },\r\n    [getTerrainNoise, getVariantNoise, getBorderGradientValue]\r\n  )\r\n\r\n  return getInfo\r\n}\r\n","import React from 'react'\nimport World from './World'\nimport './styles.css'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <World\n        size={700}\n        clouds={false}\n        // cloudsSeed={3964}\n        // terrainSeed={7635}\n        // cloudsVariantSeed={7829}\n        // terrainVariantSeed={3333}\n      />\n    </div>\n  )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./App\"\n\nconst rootElement = document.getElementById(\"root\")\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n)\n"],"sourceRoot":""}